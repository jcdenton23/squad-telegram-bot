const TelegramApi = require('node-telegram-bot-api');
const { gameOptions } = require('./options');

const token = '5670120429:AAE8uSveZVhew3BlS8v_P_3kiqy-ZxfBdp8';

const bot = new TelegramApi(token, { polling: true });

const chats = {};
const initialMessage = `
üèÜ –ò–≥—Ä–∞ üìç –ú–µ—Å—Ç–æ üïñ –í—Ä–µ–º—è
`;

require('http')
  .createServer()
  .listen(process.env.PORT || 5000)
  .on('request', function (req, res) {
    res.end('');
  });

const changeGameSettings = async (settingsText, chatId) => {
  const [gameName = '–ö–≤–∏–∑–ü–ª–∏–∑', place = 'Friends', time = '19:15'] = settingsText.split(',');
  let newMessage = chats[chatId]?.initialMessage.replace('–ò–≥—Ä–∞', `${gameName.trim()}`);
  newMessage = newMessage.replace('–ú–µ—Å—Ç–æ', place.trim());
  newMessage = newMessage.replace('–í—Ä–µ–º—è', time.trim());
  chats[chatId] = { ...chats[chatId], initialMessage: newMessage };
  await bot.editMessageText(newMessage, {
    chat_id: chatId,
    message_id: chats[chatId]?.messageId,
  });
};

const startSquad = async (chatId) => {
  const { message_id: initialMessageId } = await bot.sendMessage(chatId, initialMessage);
  squad = [];
  chats[chatId] = { initialMessage: initialMessage, messageId: initialMessageId };
  await bot.pinChatMessage(chatId, initialMessageId);
  await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É', gameOptions);
};

const start = async () => {
  bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å —Å–±–æ—Ä' },
    { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è' },
    { command: '/addfriend', description: '–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞' },
    { command: '/remove', description: '–£–¥–∞–ª–∏—Ç—å —Å–µ–±—è' },
    { command: '/removefriend', description: '–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞' },
  ]);

  bot.on('message', async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;
    if (text === '/start' || text === '/start@FifaxQuizSquadBot') {
      return await startSquad(chatId);
    }
    if (text === '/add' || text === '/add@FifaxQuizSquadBot') {
      const oldMessage = chats[chatId]?.initialMessage;
      const msgFrom = msg.from.first_name;
      const newMessage = oldMessage + `\n${msgFrom} ‚úÖ`;
      chats[chatId] = { ...chats[chatId], initialMessage: newMessage };
      return await bot.editMessageText(newMessage, {
        chat_id: chatId,
        message_id: chats[chatId]?.messageId,
      });
    }
    if (text === '/remove' || text === '/remove@FifaxQuizSquadBot') {
      const oldMessage = chats[chatId]?.initialMessage;
      const msgFrom = msg.from.first_name;
      const newMessage = oldMessage.replace(`\n${msgFrom} ‚úÖ`, '');
      chats[chatId] = { ...chats[chatId], initialMessage: newMessage };
      return await bot.editMessageText(newMessage, {
        chat_id: chatId,
        message_id: chats[chatId]?.messageId,
      });
    }
    if (text === '/changeSettings') {
      const { message_id: gameSettingsMessageId } = await bot.sendMessage(
        chatId,
        '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –º–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è.'
      );

      return await bot.onReplyToMessage(chatId, gameSettingsMessageId, async (msg) => {
        await changeGameSettings(msg.text, chatId);
      });
    }
    if (text === '/addfriend' || text === '/addfriend@FifaxQuizSquadBot') {
      const { message_id: friendNameMessageId } = await bot.sendMessage(
        chatId,
        '–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å'
      );
      return await bot.onReplyToMessage(chatId, friendNameMessageId, async (msg) => {
        const oldMessage = chats[chatId]?.initialMessage;
        const friendName = msg.text;
        const newMessage = oldMessage + `\n${friendName} ‚úÖ`;
        chats[chatId] = { ...chats[chatId], initialMessage: newMessage };
        await bot.editMessageText(newMessage, {
          chat_id: chatId,
          message_id: chats[chatId]?.messageId,
        });
      });
    }
    if (text === '/removefriend' || text === '/removefriend@FifaxQuizSquadBot') {
      const { message_id: friendNameMessageId } = await bot.sendMessage(
        chatId,
        '–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'
      );
      return await bot.onReplyToMessage(chatId, friendNameMessageId, async (msg) => {
        const oldMessage = chats[chatId]?.initialMessage;
        const friendName = msg.text;
        const newMessage = oldMessage.replace(`\n${friendName} ‚úÖ`, '');
        chats[chatId] = { ...chats[chatId], initialMessage: newMessage };
        await bot.editMessageText(newMessage, {
          chat_id: chatId,
          message_id: chats[chatId]?.messageId,
        });
      });
    }
  });

  bot.on('callback_query', async (msg) => {
    const data = msg.data;
    const chatId = msg.message.chat.id;
    if (data === '/quizplease') {
      let newMessage = initialMessage.replace('–ò–≥—Ä–∞', '–ö–≤–∏–∑ –ü–ª–∏–∑!');
      newMessage = newMessage.replace('–ú–µ—Å—Ç–æ', 'Friends');
      newMessage = newMessage.replace('–í—Ä–µ–º—è', '19:15');
      chats[chatId] = { ...chats[chatId], initialMessage: newMessage };
      await bot.editMessageText(newMessage, {
        chat_id: chatId,
        message_id: chats[chatId]?.messageId,
      });
    }
    if (data === '/einstein') {
      let newMessage = initialMessage.replace('–ò–≥—Ä–∞', '–≠–π–Ω—à—Ç–µ–π–Ω Party');
      newMessage = newMessage.replace('–ú–µ—Å—Ç–æ', '–ù–∞—à –±–∞—Ä');
      newMessage = newMessage.replace('–í—Ä–µ–º—è', '19-15');
      chats[chatId] = { ...chats[chatId], initialMessage: newMessage };
      await bot.editMessageText(newMessage, {
        chat_id: chatId,
        message_id: chats[chatId]?.messageId,
      });
    }
  });
};

start();
